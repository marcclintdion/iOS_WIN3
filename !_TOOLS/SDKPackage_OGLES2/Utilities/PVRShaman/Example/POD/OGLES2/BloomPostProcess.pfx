[HEADER]
	VERSION		01.00.00.00
	DESCRIPTION Post Process Example
	COPYRIGHT	Imagination Technologies Ltd.
[/HEADER]

[TEXTURE]
	NAME		SceneResult
	FILTER		LINEAR-LINEAR-NONE
	VIEW		PFX_CURRENTVIEW
[/TEXTURE]

[TARGET]
	NAME		BlurVertTarget
	FILTER		LINEAR-LINEAR-NONE
	RESOLUTION	256 256
[/TARGET]

[TARGET]
	NAME		BlurHoriTarget
	FILTER		LINEAR-LINEAR-NONE
	RESOLUTION	256 256
[/TARGET]

[TARGET]
	NAME		HighPassTarget
	FILTER		LINEAR-LINEAR-NONE
	RESOLUTION	256 256
[/TARGET]

[TARGET]
	NAME		CombineTarget
	FILTER		LINEAR-LINEAR-NONE
[/TARGET]


// ------------------------------------------------------------------------------
// ------------------------------------------------------------ BLUR POST PROCESS
// ------------------------------------------------------------------------------
[VERTEXSHADER]
	NAME HorizBlurVertShader
	[GLSL_CODE]
		attribute highp   vec3  inVertex;
		attribute mediump vec2  inTexCoord;
			
		varying mediump vec2  TexCoord0;
		varying mediump vec2  TexCoord1;
		varying mediump vec2  TexCoord2;
		varying mediump vec2  TexCoord3;		
		varying mediump vec2  TexCoord4;
		
		void main()
		{
			// Pass through vertex
			gl_Position = vec4(inVertex, 1.0);
			mediump vec2 offset = vec2(0.006253125, 0.0);

		    TexCoord0 = inTexCoord;		  
		    TexCoord1 = clamp(inTexCoord - offset, 0.0, 1.0);
		    TexCoord2 = clamp(inTexCoord + offset, 0.0, 1.0); 
		    TexCoord3 = clamp(TexCoord0*2.0, 0.0, 1.0);
		    TexCoord4 = clamp(TexCoord2*2.0, 0.0, 1.0);
		}
	[/GLSL_CODE]
[/VERTEXSHADER]
[VERTEXSHADER]
	NAME VertBlurVertShader
	[GLSL_CODE]
		attribute highp   vec3  inVertex;
		attribute mediump vec2  inTexCoord;
			
		varying mediump vec2  TexCoord0;
		varying mediump vec2  TexCoord1;
		varying mediump vec2  TexCoord2;
		varying mediump vec2  TexCoord3;		
		varying mediump vec2  TexCoord4;
		
		void main()
		{
			// Pass through vertex
			gl_Position = vec4(inVertex, 1.0);
			mediump vec2 offset = vec2(0.0, 0.006253125);
		  
		    TexCoord0 = inTexCoord;		  
		    TexCoord1 = clamp(inTexCoord - offset, 0.0, 1.0);
		    TexCoord2 = clamp(inTexCoord + offset, 0.0, 1.0); 
		    TexCoord3 = clamp(TexCoord0*2.0, 0.0, 1.0);
		    TexCoord4 = clamp(TexCoord2*2.0, 0.0, 1.0);
		}
	[/GLSL_CODE]
[/VERTEXSHADER]
[FRAGMENTSHADER]
	NAME BlurFragShader
	[GLSL_CODE]
		uniform lowp sampler2D  sTexture;		
		varying mediump vec2  TexCoord0;
		varying mediump vec2  TexCoord1;
		varying mediump vec2  TexCoord2;
		varying mediump vec2  TexCoord3;		
		varying mediump vec2  TexCoord4;
				
		void main()
		{
		    lowp vec3 color = texture2D(sTexture, TexCoord0).rgb * 0.2;
		    color = color + texture2D(sTexture, TexCoord1).rgb * 0.2;
		    color = color + texture2D(sTexture, TexCoord2).rgb * 0.2;   
		    color = color + texture2D(sTexture, TexCoord3).rgb * 0.2;   
		    color = color + texture2D(sTexture, TexCoord4).rgb * 0.2;   
		    		
		    gl_FragColor.rgb = color.rgb;
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER] 
[EFFECT] 
	NAME HorizBlurEffect
	
	ATTRIBUTE	inVertex	POSITION
	ATTRIBUTE 	inTexCoord 	UV0
	UNIFORM 	sTexture	TEXTURE0
	
	TEXTURE 0 		HighPassTarget
	TARGET 	COLOR0 	BlurHoriTarget
	
	VERTEXSHADER HorizBlurVertShader
	FRAGMENTSHADER BlurFragShader
[/EFFECT]
[EFFECT] 
	NAME VertBlurEffect
	
	ATTRIBUTE	inVertex	POSITION
	ATTRIBUTE 	inTexCoord 	UV0
	UNIFORM 	sTexture	TEXTURE0
	
	TEXTURE 0 		BlurHoriTarget
	TARGET 	COLOR0 	BlurVertTarget
	
	VERTEXSHADER VertBlurVertShader
	FRAGMENTSHADER BlurFragShader
[/EFFECT]

// ------------------------------------------------------------------------------
// ------------------------------------------------ HIGH PASS FILTER POST PROCESS
// ------------------------------------------------------------------------------

[VERTEXSHADER]
	NAME HPFilterVertShader
	[GLSL_CODE]
		attribute highp   vec3  inVertex;
		attribute mediump vec2  inTexCoord;
		varying mediump   vec2  vTexCoord;
					
		void main()
		{
			gl_Position = vec4(inVertex, 1.0);
			vTexCoord   = inTexCoord;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME HPFilterFragShader
	[GLSL_CODE]
		uniform 			sampler2D  	sTexture;
		varying mediump   	vec2  		vTexCoord;
		void main()
		{		
			mediump vec3 vCol = (texture2D(sTexture, vTexCoord).rgb - vec3(0.4)) * 2.0;
			
			// Average out the rgbs to form greyscale.
			lowp float fLum = (vCol.r+vCol.g+vCol.b)/3.0;
			vCol = vec3(fLum);
			
		    gl_FragColor = vec4(vCol.rgb, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
[EFFECT] 
	NAME HighPassFilterEffect
	
	ATTRIBUTE	inVertex	POSITION
	ATTRIBUTE   inTexCoord 	UV0
	UNIFORM		sTexture	TEXTURE0
	
	TEXTURE 0 		SceneResult
	TARGET 	COLOR0 	HighPassTarget
		
	VERTEXSHADER HPFilterVertShader
	FRAGMENTSHADER HPFilterFragShader
[/EFFECT]

// ------------------------------------------------------------------------------
// --------------------------------------------------------- COMBINE POST PROCESS
// ------------------------------------------------------------------------------
[VERTEXSHADER]
	NAME CombineVertShader
	[GLSL_CODE]
		attribute highp   vec3  inVertex;
		attribute mediump vec2  inTexCoord;
		varying mediump   vec2  vTexCoord;
					
		void main()
		{
			gl_Position = vec4(inVertex, 1.0);
			vTexCoord   = inTexCoord;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

[FRAGMENTSHADER]
	NAME CombineFragShader
	[GLSL_CODE]
		uniform sampler2D       sBlur;
		uniform sampler2D		sBase;	
		varying mediump   vec2  vTexCoord;
		void main()
		{		
			lowp vec4 vColour = texture2D(sBlur, vTexCoord) + texture2D(sBase, vTexCoord);
		    gl_FragColor = vColour;
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
[EFFECT] 
	NAME CombineEffect
	
	ATTRIBUTE	inVertex	POSITION
	ATTRIBUTE   inTexCoord 	UV0

	UNIFORM sBase 		TEXTURE0
	UNIFORM sBlur 		TEXTURE1
	
	TEXTURE 0 		SceneResult
	TEXTURE 1 		BlurVertTarget
	TARGET 	COLOR0 	CombineTarget
		
	VERTEXSHADER CombineVertShader
	FRAGMENTSHADER CombineFragShader
[/EFFECT]